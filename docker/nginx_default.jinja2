{% if docker_https %}
server {
    listen   80;
    {% if docker_ipv6 %}
      listen   [::]:80;
    {% endif %}
    server_name {{public_hostname_}};
    return 301 https://$host$request_uri;
}
{% endif %}

server {
  {% if docker_https %}
      listen 443 ssl http2;
          {% if docker_ipv6 %}
              listen   [::]:443 ssl http2;
          {% endif %}
      ssl_certificate     /etc/letsencrypt/live/{{public_hostname_}}/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/{{public_hostname_}}/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    # Warning: Setting `ssl_session_tickets` to `off` works only if its value is the same for all `server{}` blocks of all server configurations, or if it is set in an `http{}` block. See https://community.letsencrypt.org/t/errors-from-browsers-with-ssl-session-tickets-off-nginx/18124/5 . It is recommended to either set it to `off` (because implementations are not good enough for the moment), or keep forward secrecy by restarting web servers often enough. See https://github.com/mozilla/server-side-tls/issues/135 and https://wiki.mozilla.org/Security/Server_Side_TLS#TLS_tickets_.28RFC_5077.29
    # ssl_session_tickets off;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security max-age=15768000;
    ssl_stapling on;
    ssl_stapling_verify on;
    {% if oscp_path %}
    ssl_trusted_certificate {{ oscp_path }};
    {% endif %}

  {% else %}
    listen    80;
    {% if docker_ipv6 %}
        listen   [::]:80;
    {% endif %}
  {% endif %}

  add_header x-xss-protection "1; mode=block" always;
  add_header x-frame-options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;

  server_tokens off;
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' data: {{ docker_piwik }} *.facebook.net *.twimg.com *.twitter.com ; frame-src 'self' www.youtube.com *.facebook.com embed.ted.com *.twitter.com twitter.com player.vimeo.com; connect-src 'self' wss://{{public_hostname_}} {{ docker_sentry }} {{ docker_piwik }} *.twitter.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com *.twimg.com *.twitter.com ; font-src 'self' data: fonts.gstatic.com; img-src 'self' http://{{public_hostname_}} data: {{ docker_piwik }} *.facebook.com http://www.gravatar.com www.gravatar.com *.googleusercontent.com *.twimg.com *.twitter.com framapic.org *.cloudfront.net";

  # This is the server name, if you're running multiple servers
  server_name {{public_hostname_}};

  {% if disallow_robots %}
      location /robots.txt {
          return 200 "User-agent: *\nDisallow: /";
      }
  {% endif %}

  location /.well-known {
      #This is for domain verification
      alias /var/www/html/.well-known;
  }

  location /socket {
      proxy_pass http://assembl{{ assembl_index }}:8090/socket;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  }

  location /static {
      autoindex off;
      # This match static2 too, bundle.js is served directly by nginx, the request doesn't go through uwsgi.
      # ETag and Last-Modified headers are set by nginx, but we need Cache-Control max-age
      # so the browser check back for changes with If-Modified-Since or If-None-Match header after 1h
      add_header Cache-Control "public, max-age=3600";
      alias /opt/assembl_static/static;
  }

  location / {

      include uwsgi_params;
      uwsgi_read_timeout 5m;
      uwsgi_pass uwsgi://assembl{{ assembl_index }}:{{ 9000 + assembl_index }};
  }

  # So files uploaded to the database are not artificailly limited by nginx
  client_max_body_size 500M;

  # Save some bandwidth
  gzip on;
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  #text/html is implicit
  gzip_types text/plain text/css application/json application/ld+json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js image/svg+xml font/truetype font/opentype application/vnd.ms-fontobject;
}
